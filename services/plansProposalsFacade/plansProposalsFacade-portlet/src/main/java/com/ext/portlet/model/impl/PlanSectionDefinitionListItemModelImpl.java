package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanSectionDefinitionListItem;
import com.ext.portlet.model.PlanSectionDefinitionListItemModel;
import com.ext.portlet.model.PlanSectionDefinitionListItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanSectionDefinitionListItem service. Represents a row in the &quot;xcolab_PlanSectionDefinitionListItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanSectionDefinitionListItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanSectionDefinitionListItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanSectionDefinitionListItemImpl
 * @see com.ext.portlet.model.PlanSectionDefinitionListItem
 * @see com.ext.portlet.model.PlanSectionDefinitionListItemModel
 * @generated
 */
@JSON(strict = true)
public class PlanSectionDefinitionListItemModelImpl extends BaseModelImpl<PlanSectionDefinitionListItem>
    implements PlanSectionDefinitionListItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan section definition list item model instance should use the {@link com.ext.portlet.model.PlanSectionDefinitionListItem} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanSectionDefinitionListItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "sectionDefinitionId", Types.BIGINT },
            { "type_", Types.VARCHAR },
            { "referencedId", Types.BIGINT },
            { "data_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanSectionDefinitionListItem (id_ LONG not null primary key,sectionDefinitionId LONG,type_ VARCHAR(75) null,referencedId LONG,data_ VARCHAR(500) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanSectionDefinitionListItem";
    public static final String ORDER_BY_JPQL = " ORDER BY planSectionDefinitionListItem.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanSectionDefinitionListItem.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanSectionDefinitionListItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanSectionDefinitionListItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanSectionDefinitionListItem"),
            true);
    public static long SECTIONDEFINITIONID_COLUMN_BITMASK = 1L;
    public static long TYPE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanSectionDefinitionListItem"));
    private static ClassLoader _classLoader = PlanSectionDefinitionListItem.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanSectionDefinitionListItem.class
        };
    private long _id;
    private long _sectionDefinitionId;
    private long _originalSectionDefinitionId;
    private boolean _setOriginalSectionDefinitionId;
    private String _type;
    private String _originalType;
    private long _referencedId;
    private String _data;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private PlanSectionDefinitionListItem _escapedModelProxy;

    public PlanSectionDefinitionListItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanSectionDefinitionListItem toModel(
        PlanSectionDefinitionListItemSoap soapModel) {
        PlanSectionDefinitionListItem model = new PlanSectionDefinitionListItemImpl();

        model.setId(soapModel.getId());
        model.setSectionDefinitionId(soapModel.getSectionDefinitionId());
        model.setType(soapModel.getType());
        model.setReferencedId(soapModel.getReferencedId());
        model.setData(soapModel.getData());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanSectionDefinitionListItem> toModels(
        PlanSectionDefinitionListItemSoap[] soapModels) {
        List<PlanSectionDefinitionListItem> models = new ArrayList<PlanSectionDefinitionListItem>(soapModels.length);

        for (PlanSectionDefinitionListItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanSectionDefinitionListItem.class;
    }

    public String getModelClassName() {
        return PlanSectionDefinitionListItem.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    public long getSectionDefinitionId() {
        return _sectionDefinitionId;
    }

    public void setSectionDefinitionId(long sectionDefinitionId) {
        _columnBitmask |= SECTIONDEFINITIONID_COLUMN_BITMASK;

        if (!_setOriginalSectionDefinitionId) {
            _setOriginalSectionDefinitionId = true;

            _originalSectionDefinitionId = _sectionDefinitionId;
        }

        _sectionDefinitionId = sectionDefinitionId;
    }

    public long getOriginalSectionDefinitionId() {
        return _originalSectionDefinitionId;
    }

    @JSON
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    public void setType(String type) {
        _columnBitmask |= TYPE_COLUMN_BITMASK;

        if (_originalType == null) {
            _originalType = _type;
        }

        _type = type;
    }

    public String getOriginalType() {
        return GetterUtil.getString(_originalType);
    }

    @JSON
    public long getReferencedId() {
        return _referencedId;
    }

    public void setReferencedId(long referencedId) {
        _referencedId = referencedId;
    }

    @JSON
    public String getData() {
        if (_data == null) {
            return StringPool.BLANK;
        } else {
            return _data;
        }
    }

    public void setData(String data) {
        _data = data;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanSectionDefinitionListItem toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanSectionDefinitionListItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanSectionDefinitionListItem.class.getName(),
                    getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanSectionDefinitionListItemImpl planSectionDefinitionListItemImpl = new PlanSectionDefinitionListItemImpl();

        planSectionDefinitionListItemImpl.setId(getId());
        planSectionDefinitionListItemImpl.setSectionDefinitionId(getSectionDefinitionId());
        planSectionDefinitionListItemImpl.setType(getType());
        planSectionDefinitionListItemImpl.setReferencedId(getReferencedId());
        planSectionDefinitionListItemImpl.setData(getData());

        planSectionDefinitionListItemImpl.resetOriginalValues();

        return planSectionDefinitionListItemImpl;
    }

    public int compareTo(
        PlanSectionDefinitionListItem planSectionDefinitionListItem) {
        int value = 0;

        if (getId() < planSectionDefinitionListItem.getId()) {
            value = -1;
        } else if (getId() > planSectionDefinitionListItem.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanSectionDefinitionListItem planSectionDefinitionListItem = null;

        try {
            planSectionDefinitionListItem = (PlanSectionDefinitionListItem) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planSectionDefinitionListItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanSectionDefinitionListItemModelImpl planSectionDefinitionListItemModelImpl =
            this;

        planSectionDefinitionListItemModelImpl._originalSectionDefinitionId = planSectionDefinitionListItemModelImpl._sectionDefinitionId;

        planSectionDefinitionListItemModelImpl._setOriginalSectionDefinitionId = false;

        planSectionDefinitionListItemModelImpl._originalType = planSectionDefinitionListItemModelImpl._type;

        planSectionDefinitionListItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanSectionDefinitionListItem> toCacheModel() {
        PlanSectionDefinitionListItemCacheModel planSectionDefinitionListItemCacheModel =
            new PlanSectionDefinitionListItemCacheModel();

        planSectionDefinitionListItemCacheModel.id = getId();

        planSectionDefinitionListItemCacheModel.sectionDefinitionId = getSectionDefinitionId();

        planSectionDefinitionListItemCacheModel.type = getType();

        String type = planSectionDefinitionListItemCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            planSectionDefinitionListItemCacheModel.type = null;
        }

        planSectionDefinitionListItemCacheModel.referencedId = getReferencedId();

        planSectionDefinitionListItemCacheModel.data = getData();

        String data = planSectionDefinitionListItemCacheModel.data;

        if ((data != null) && (data.length() == 0)) {
            planSectionDefinitionListItemCacheModel.data = null;
        }

        return planSectionDefinitionListItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", sectionDefinitionId=");
        sb.append(getSectionDefinitionId());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", referencedId=");
        sb.append(getReferencedId());
        sb.append(", data=");
        sb.append(getData());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanSectionDefinitionListItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionDefinitionId</column-name><column-value><![CDATA[");
        sb.append(getSectionDefinitionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>referencedId</column-name><column-value><![CDATA[");
        sb.append(getReferencedId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>data</column-name><column-value><![CDATA[");
        sb.append(getData());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
