package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanToPlan;
import com.ext.portlet.model.PlanToPlanModel;
import com.ext.portlet.model.PlanToPlanSoap;
import com.ext.portlet.service.persistence.PlanToPlanPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanToPlan service. Represents a row in the &quot;xcolab_PlanToPlan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanToPlanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanToPlanImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanToPlanImpl
 * @see com.ext.portlet.model.PlanToPlan
 * @see com.ext.portlet.model.PlanToPlanModel
 * @generated
 */
@JSON(strict = true)
public class PlanToPlanModelImpl extends BaseModelImpl<PlanToPlan>
    implements PlanToPlanModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan to plan model instance should use the {@link com.ext.portlet.model.PlanToPlan} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanToPlan";
    public static final Object[][] TABLE_COLUMNS = {
            { "fromPlanId", Types.BIGINT },
            { "toPlanId", Types.BIGINT },
            { "referenceCount", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanToPlan (fromPlanId LONG not null,toPlanId LONG not null,referenceCount INTEGER,primary key (fromPlanId, toPlanId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanToPlan";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanToPlan"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanToPlan"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanToPlan"),
            true);
    public static long FROMPLANID_COLUMN_BITMASK = 1L;
    public static long TOPLANID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanToPlan"));
    private static ClassLoader _classLoader = PlanToPlan.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanToPlan.class
        };
    private long _fromPlanId;
    private long _originalFromPlanId;
    private boolean _setOriginalFromPlanId;
    private long _toPlanId;
    private long _originalToPlanId;
    private boolean _setOriginalToPlanId;
    private int _referenceCount;
    private long _columnBitmask;
    private PlanToPlan _escapedModelProxy;

    public PlanToPlanModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanToPlan toModel(PlanToPlanSoap soapModel) {
        PlanToPlan model = new PlanToPlanImpl();

        model.setFromPlanId(soapModel.getFromPlanId());
        model.setToPlanId(soapModel.getToPlanId());
        model.setReferenceCount(soapModel.getReferenceCount());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanToPlan> toModels(PlanToPlanSoap[] soapModels) {
        List<PlanToPlan> models = new ArrayList<PlanToPlan>(soapModels.length);

        for (PlanToPlanSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public PlanToPlanPK getPrimaryKey() {
        return new PlanToPlanPK(_fromPlanId, _toPlanId);
    }

    public void setPrimaryKey(PlanToPlanPK primaryKey) {
        setFromPlanId(primaryKey.fromPlanId);
        setToPlanId(primaryKey.toPlanId);
    }

    public Serializable getPrimaryKeyObj() {
        return new PlanToPlanPK(_fromPlanId, _toPlanId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PlanToPlanPK) primaryKeyObj);
    }

    public Class<?> getModelClass() {
        return PlanToPlan.class;
    }

    public String getModelClassName() {
        return PlanToPlan.class.getName();
    }

    @JSON
    public long getFromPlanId() {
        return _fromPlanId;
    }

    public void setFromPlanId(long fromPlanId) {
        _columnBitmask |= FROMPLANID_COLUMN_BITMASK;

        if (!_setOriginalFromPlanId) {
            _setOriginalFromPlanId = true;

            _originalFromPlanId = _fromPlanId;
        }

        _fromPlanId = fromPlanId;
    }

    public long getOriginalFromPlanId() {
        return _originalFromPlanId;
    }

    @JSON
    public long getToPlanId() {
        return _toPlanId;
    }

    public void setToPlanId(long toPlanId) {
        _columnBitmask |= TOPLANID_COLUMN_BITMASK;

        if (!_setOriginalToPlanId) {
            _setOriginalToPlanId = true;

            _originalToPlanId = _toPlanId;
        }

        _toPlanId = toPlanId;
    }

    public long getOriginalToPlanId() {
        return _originalToPlanId;
    }

    @JSON
    public int getReferenceCount() {
        return _referenceCount;
    }

    public void setReferenceCount(int referenceCount) {
        _referenceCount = referenceCount;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanToPlan toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanToPlan) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanToPlanImpl planToPlanImpl = new PlanToPlanImpl();

        planToPlanImpl.setFromPlanId(getFromPlanId());
        planToPlanImpl.setToPlanId(getToPlanId());
        planToPlanImpl.setReferenceCount(getReferenceCount());

        planToPlanImpl.resetOriginalValues();

        return planToPlanImpl;
    }

    public int compareTo(PlanToPlan planToPlan) {
        PlanToPlanPK primaryKey = planToPlan.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanToPlan planToPlan = null;

        try {
            planToPlan = (PlanToPlan) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        PlanToPlanPK primaryKey = planToPlan.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanToPlanModelImpl planToPlanModelImpl = this;

        planToPlanModelImpl._originalFromPlanId = planToPlanModelImpl._fromPlanId;

        planToPlanModelImpl._setOriginalFromPlanId = false;

        planToPlanModelImpl._originalToPlanId = planToPlanModelImpl._toPlanId;

        planToPlanModelImpl._setOriginalToPlanId = false;

        planToPlanModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanToPlan> toCacheModel() {
        PlanToPlanCacheModel planToPlanCacheModel = new PlanToPlanCacheModel();

        planToPlanCacheModel.fromPlanId = getFromPlanId();

        planToPlanCacheModel.toPlanId = getToPlanId();

        planToPlanCacheModel.referenceCount = getReferenceCount();

        return planToPlanCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{fromPlanId=");
        sb.append(getFromPlanId());
        sb.append(", toPlanId=");
        sb.append(getToPlanId());
        sb.append(", referenceCount=");
        sb.append(getReferenceCount());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanToPlan");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fromPlanId</column-name><column-value><![CDATA[");
        sb.append(getFromPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>toPlanId</column-name><column-value><![CDATA[");
        sb.append(getToPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>referenceCount</column-name><column-value><![CDATA[");
        sb.append(getReferenceCount());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
